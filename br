#!/usr/bin/python

import sys
import time
import thread
import os
import select
import kefeer.firefox
from kefeer.colortemp import convert_K_to_RGB


import Quartz.CoreGraphics as CG
from Quartz import CoreGraphics

default_settings = {}
current_args = 'qq'
settings = []
pipe_brightness, pipe_input = os.pipe()

display_ids = CG.CGGetActiveDisplayList(10, None, None)[1]


def resetBrightness():
	CG.CGDisplayRestoreColorSyncSettings()

def loadDefaultSettings():
	global default_settings

	resetBrightness()

	for display_id in display_ids:
		default_settings[display_id] = getSettings(display_id)

def getSettings(display_id):
	tablen = CG.CGDisplayGammaTableCapacity(display_id)
	err, r, g, b, count = CG.CGGetDisplayTransferByTable(display_id, tablen, None, None, None, None)
	return r, g, b, count

def blend(a,b,r):
	return (1-r)*a + r*b

def calculateBrightness(display_id, percents):
	r, g, b, count = default_settings[display_id]

	try:
		percents = int(percents)*10
	except:
		return display_id, r, g, b

	f = percents / 100.0


	rh = [x*f for x in r]
	gh = [x*f for x in g]
	bh = [x*f for x in b]

	tr,tg,tb=convert_K_to_RGB(2500)

	# yellow tint
	#rh = [blend(x,tr,0.1) for x in rh]
	#gh = [blend(x,tg,0.1) for x in gh]
	#bh = [blend(x,tb,0.1) for x in bh]

	rh = [x*tr for x in rh]
	gh = [x*tg for x in gh]
	bh = [x*tb for x in bh]

	return display_id, rh, gh, bh


def setBrightness(display_id, r, g, b):
	tablen = CG.CGDisplayGammaTableCapacity(display_id)
	CG.CGSetDisplayTransferByTable(display_id, tablen, r, g, b)


def maintainBrightness():
	global settings
	pre_fullscreen = None
	while True:
		"""
		if kefeer.firefox.is_fullscreen():
			if not pre_fullscreen:
				pre_fullscreen = current_args
				update_settings('qq')
		else:
			if pre_fullscreen:
				update_settings(pre_fullscreen)
				pre_fullscreen = None
		"""
		for id, r, g, b in settings:
			setBrightness(id, r, g, b)
		x, _, _ = select.select([pipe_brightness], [], [], 5.0)
		if x:  os.read(pipe_brightness, 1024)



def update_settings(args):
	global current_args
	global settings
	current_args = args
	settings = [calculateBrightness(d, p) for d, p in map(None, display_ids, args)]
	for id, r, g, b in settings:
		print id, sum(r)/len(r), sum(g)/len(g), sum(b)/len(b)

def handle_input():
	while True:
		args = raw_input('>>> ')
		update_settings(args[:2])
		os.write(pipe_input, '.')

def main():
	loadDefaultSettings()
	update_settings(['q', 'q'])
	thread.start_new_thread(maintainBrightness, ())
	handle_input()

main()


